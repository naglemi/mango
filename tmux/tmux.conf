# Minimal tmux config with working mouse support and clipboard integration
set -g mouse on
set -g history-limit 50000

# Set proper terminal type to fix carriage return issues in TUI apps
# This prevents Claude Code, tqdm, ora, and other progress indicators from creating cascading lines
# tmux-256color tells apps to use tmux-compatible escape sequences instead of xterm
set -g default-terminal "tmux-256color"

# Terminal overrides for better mouse support over SSH and in various terminals
set -ga terminal-overrides ',*:Tc'  # True color support
set -ga terminal-overrides ',xterm*:RGB'
set -ga terminal-overrides ',*256col*:RGB'
set -ga terminal-overrides ',*:Ms=\E]52;%p1%s;%p2%s\007'  # OSC 52 clipboard
set -ga terminal-overrides ',xterm*:XT'  # Extended mouse mode
set -as terminal-features ',*:RGB'  # RGB color support

# Visual feedback for pane borders (makes it easier to see where to drag)
set -g pane-border-style fg=colour240
set -g pane-active-border-style fg=colour51,bold

# Single most common working wheel binding configuration
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# System clipboard integration - Ctrl+Shift+C/V for copy/paste
# Copy from tmux to system clipboard
bind -n C-S-c run "tmux save-buffer - | xclip -i -selection clipboard"
# Paste from system clipboard to tmux
bind -n C-S-v run "xclip -o -selection clipboard | tmux load-buffer - && tmux paste-buffer"
# Select and copy entire history - Ctrl+Shift+A
bind -n C-S-a run "tmux capture-pane -S - -p | xclip -i -selection clipboard"

# Vi mode for better copy operations
setw -g mode-keys vi
# Copy mode bindings for selecting and copying
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -i -selection clipboard"
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xclip -i -selection clipboard"

# Natural pane splitting - more intuitive than % and "
bind | split-window -h -c "#{pane_current_path}"  # Split vertically with |
bind - split-window -v -c "#{pane_current_path}"  # Split horizontally with -
# Quick splitting without prefix - using less common key combos to avoid conflicts

# Easy pane navigation with Alt+Arrow keys (no prefix needed)
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Resize panes with Ctrl+Shift+Arrow keys
bind -n C-S-Left resize-pane -L 5
bind -n C-S-Right resize-pane -R 5
bind -n C-S-Up resize-pane -U 5
bind -n C-S-Down resize-pane -D 5

# Close pane with Ctrl+Shift+X
bind -n C-S-x kill-pane

# Reload config with prefix+r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Split to various interactive tools - all open in new pane to the right
bind f split-window -h -c "#{pane_current_path}" "claude --continue --dangerously-skip-permissions"        # Ctrl+b f - Fork Claude conversation
bind s split-window -h "$HOME/usability/tmux/ssh-split.sh"      # Ctrl+b s - SSH host selector
bind j split-window -h "$HOME/usability/tmux/slurm-job-split.sh" # Ctrl+b j - SLURM job selector
bind c split-window -h -c "#{pane_current_path}" "$HOME/usability/tmux/git-diff-split.sh"  # Ctrl+b c - Git diff viewer
bind e split-window -h -c "#{pane_current_path}" "$HOME/usability/tmux/vim-file-split.sh"  # Ctrl+b e - Edit file selector
bind h split-window -h hooks                                         # Ctrl+b h - Hook manager
bind o split-window -h -c "#{pane_current_path}" "$HOME/usability/tmux/claude-md-split.sh"  # Ctrl+b o - CLAUDE.md manager
bind n split-window -h "$HOME/usability/tmux/nvidia-split.sh"    # Ctrl+b n - NVIDIA GPU monitor
bind v split-window -v -l 10 "nvtop"                               # Ctrl+b v - NVIDIA GPU top
bind u split-window -v -l 8 "watch -n 1 gpustat -cp"              # Ctrl+b u - GPUstat compact top
bind k split-window -h -c "#{pane_current_path}" "$HOME/usability/tmux/ask-llm.sh"  # Ctrl+b k - Ask LLM
bind t split-window -h "$HOME/usability/tmux/htop-split.sh"      # Ctrl+b t - System monitor (htop)
bind l split-window -h "$HOME/usability/tmux/glances-split.sh"   # Ctrl+b l - System monitor (glances)
bind b split-window -h "$HOME/usability/tmux/browsh-split.sh"    # Ctrl+b b - Web browser (browsh)

# Right-click context menu
# Right click on pane to get menu with useful options
bind -n MouseDown3Pane select-pane -t= \; display-menu -T "Tmux Menu" -x M -y M \
    "New Window"        n "new-window" \
    "Next Window"       s "next-window" \
    "Break to Window"   d "break-pane" \
    "Consolidate Windows" W "display-popup -E -w 90% -h 90% '$HOME/usability/tmux/consolidate-windows.sh'" \
    "Close Pane"        z "display-menu -T 'Close Pane?' 'Yes (Kill)' z 'kill-pane' 'Break to Window' p 'break-pane' 'Suspend' q 'send-keys C-z' 'No (Cancel)' r ''" \
    "Rename Pane"       R "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/pane-rename.py'" \
    "" \
    "Split Horizontal"  h "split-window -v -c '#{pane_current_path}'" \
    "Split Vertical"    v "split-window -h -c '#{pane_current_path}'" \
    "" \
    "Ask LLM"          k "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/ask-llm.sh'" \
    "Grab Files"       r "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/grab-files-checkbox.sh'" \
    "Copy Buffer"      y "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/buffer-copy-menu.py'" \
    "Train Model"      x "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/training-menu.py'" \
    "W&B Monitor"      m "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/wandb-monitor.sh'" \
    "EC2 SSH"          b "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/ec2-ssh-menu.sh'" \
    "Settings"         w "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/settings-menu.py'" \
    "Spectator"        i "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/spectator.sh'" \
    "" \
    "Fork Claude"       f "split-window -h -c '#{pane_current_path}' 'claude --continue --dangerously-skip-permissions'" \
    "SSH to Host"       a "split-window -h '$HOME/usability/tmux/ssh-split.sh'" \
    "SLURM Jobs"        j "split-window -h '$HOME/usability/tmux/slurm-job-split.sh'" \
    "Lazygit"           c "split-window -h -c '#{pane_current_path}' 'lazygit'" \
    "Edit File"         e "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/vim-file-split.sh'" \
    "CLAUDE.md"         o "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/claude-md-split.sh'" \
    "Hook Manager"      p "split-window -h hooks" \
    "" \
    "NVTOP Monitor"     q "split-window -v -l 10 'nvtop'" \
    "GPUstat Compact"   u "split-window -v -l 8 'watch -n 1 gpustat -cp'" \
    "System Monitor"    t "split-window -h '$HOME/usability/tmux/htop-split.sh'" \
    "Glances Monitor"   l "split-window -h '$HOME/usability/tmux/glances-split.sh'" \
    "" \
    "Plugin Manager"    P "display-menu -T 'Plugin Manager' 'Session Tree (Ctrl+b Ctrl+w)' w 'send-keys C-b C-w' 'Save Session (Ctrl+b Ctrl+s)' s 'send-keys C-b C-s' 'Restore Session (Ctrl+b Ctrl+r)' r 'send-keys C-b C-r' 'Install Plugins (Ctrl+b I)' I 'send-keys C-b I' 'Update Plugins (Ctrl+b U)' U 'send-keys C-b U'"

# Right-click on window tabs (status bar) to rename windows
bind -n MouseDown3Status display-menu -T "Window Menu" -x W -y W \
    "Rename Window"     r "command-prompt -I '#W' 'rename-window \"%%\"'" \
    "New Window"        n "new-window" \
    "Kill Window"       z "confirm-before -p 'Kill window #I:#W? (y/n)' kill-window" \
    "Combine All Windows" W "display-popup -E -w 90% -h 90% '$HOME/usability/tmux/consolidate-windows.sh'" \
    "" \
    "Even Layout (1 Row)" e "select-layout even-horizontal" \
    "Grid Layout (2+ Rows)" f "select-layout tiled"
# iOS-friendly shortcuts (single control keys, no shift required)
# Ctrl-g (^g) - Show menu (replaces right-click)
bind -n C-g display-menu -T "Tmux Menu" \
    "Show Menu"         g "display-menu -T 'Tmux Menu'" \
    "New Window"        n "new-window" \
    "Next Window"       s "next-window" \
    "Break to Window"   d "break-pane" \
    "Consolidate Windows" W "display-popup -E -w 90% -h 90% '$HOME/usability/tmux/consolidate-windows.sh'" \
    "Close Pane"        z "display-menu -T 'Close Pane?' 'Yes (Kill)' z 'kill-pane' 'Break to Window' p 'break-pane' 'Suspend' q 'send-keys C-z' 'No (Cancel)' r ''" \
    "Rename Pane"       R "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/pane-rename.py'" \
    "" \
    "Split Horizontal"  h "split-window -v -c '#{pane_current_path}'" \
    "Split Vertical"    v "split-window -h -c '#{pane_current_path}'" \
    "" \
    "Ask LLM"          k "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/ask-llm.sh'" \
    "Grab Files"       r "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/grab-files-checkbox.sh'" \
    "Copy Buffer"      y "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/buffer-copy-menu.py'" \
    "Train Model"      x "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/training-menu.py'" \
    "W&B Monitor"      m "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/wandb-monitor.sh'" \
    "EC2 SSH"          b "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/ec2-ssh-menu.sh'" \
    "Settings"         w "split-window -h -c '#{pane_current_path}' 'python3 $HOME/usability/tmux/settings-menu.py'" \
    "Spectator"        i "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/spectator.sh'" \
    "" \
    "Fork Claude"       f "split-window -h -c '#{pane_current_path}' 'claude --continue --dangerously-skip-permissions'" \
    "SSH to Host"       a "split-window -h '$HOME/usability/tmux/ssh-split.sh'" \
    "SLURM Jobs"        j "split-window -h '$HOME/usability/tmux/slurm-job-split.sh'" \
    "Lazygit"           c "split-window -h -c '#{pane_current_path}' 'lazygit'" \
    "Edit File"         e "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/vim-file-split.sh'" \
    "CLAUDE.md"         o "split-window -h -c '#{pane_current_path}' '$HOME/usability/tmux/claude-md-split.sh'" \
    "Hook Manager"      p "split-window -h hooks" \
    "" \
    "NVTOP Monitor"     q "split-window -v -l 10 'nvtop'" \
    "GPUstat Compact"   u "split-window -v -l 8 'watch -n 1 gpustat -cp'" \
    "System Monitor"    t "split-window -h '$HOME/usability/tmux/htop-split.sh'" \
    "Glances Monitor"   l "split-window -h '$HOME/usability/tmux/glances-split.sh'" \
    "" \
    "Plugin Manager"    P "display-menu -T 'Plugin Manager' 'Session Tree (Ctrl+b Ctrl+w)' w 'send-keys C-b C-w' 'Save Session (Ctrl+b Ctrl+s)' s 'send-keys C-b C-s' 'Restore Session (Ctrl+b Ctrl+r)' r 'send-keys C-b C-r' 'Install Plugins (Ctrl+b I)' I 'send-keys C-b I' 'Update Plugins (Ctrl+b U)' U 'send-keys C-b U'"

# Kill pane with confirmation - y=yes, p=break to window, s=suspend, n=no
bind -n C-x display-menu -T "Close Pane?" \
    "Yes (Kill)"        z "kill-pane" \
    "Break to Window"   p "break-pane" \
    "Suspend"           q "send-keys C-z" \
    "No (Cancel)"       n ""

# Ctrl-Shift-Z alternative for kill pane
bind -n C-Z display-menu -T "Close Pane?" \
    "Yes (Kill)"        z "kill-pane" \
    "Break to Window"   p "break-pane" \
    "Suspend"           q "send-keys C-z" \
    "No (Cancel)"       n ""

# Remove any old Ctrl-r bindings
unbind -n C-r

# Window management shortcuts (iOS-friendly)
# Create new window
bind -n C-n new-window

# Next window only (no previous)
bind -n C-s next-window

# Break pane into its own window
bind -n C-D break-pane

# Close window with confirmation (override default)
bind -n C-w display-menu -T "Close Window?" \
    "Yes (Close)"   z "kill-window" \
    "No (Cancel)"   n ""

# Status bar configuration for window tabs
set -g status on
set -g status-position bottom
set -g status-interval 5

# Status bar colors and style
set -g status-style 'bg=#2e3440,fg=#d8dee9'

# Window tabs configuration
set -g window-status-format ' #I:#W '
set -g window-status-current-format ' #I:#W '
set -g window-status-style 'bg=#3b4252,fg=#d8dee9'
set -g window-status-current-style 'bg=#5e81ac,fg=#eceff4,bold'

# Left side: session name
set -g status-left '[#S] '
set -g status-left-length 20
set -g status-left-style 'bg=#bf616a,fg=#eceff4,bold'

# Right side: date and time
set -g status-right ' %Y-%m-%d %H:%M '
set -g status-right-length 50
set -g status-right-style 'bg=#a3be8c,fg=#2e3440,bold'

# Center: window list (tabs)
set -g status-justify centre

# ============================================================================
# Plugin Configuration - TPM (Tmux Plugin Manager)
# ============================================================================
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'kiyoon/treemux'

# tmux-resurrect configuration
# Uses default keybindings: Prefix + Ctrl-s (save), Prefix + Ctrl-r (restore)
set -g @resurrect-dir '~/.tmux/resurrect'

# Restore pane contents (experimental but useful)
set -g @resurrect-capture-pane-contents 'on'

# Restore vim sessions if Session.vim exists
set -g @resurrect-strategy-vim 'session'

# Restore neovim sessions
set -g @resurrect-strategy-nvim 'session'

# Restore additional programs
set -g @resurrect-processes 'ssh python python3 vim nvim htop top glances nvtop gpustat ~claude'

# treemux configuration
# Uses default keybinding: Prefix + Ctrl-w for tree view
set -g @treemux-tree-nvim-init-file '~/.tmux/plugins/treemux/configs/treemux_init.lua'
set -g @treemux-tree-focus 'smart'

# tmux-continuum configuration
# Automatic restore on tmux start
set -g @continuum-restore 'on'

# Auto-save interval in minutes (default is 15)
set -g @continuum-save-interval '15'

# Show status in status bar: "#{continuum_status}"
# Display status of continuum in the status bar
set -g status-right ' #{continuum_status} | %Y-%m-%d %H:%M '

# Initialize TPM (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
